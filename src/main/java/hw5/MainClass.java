package hw5;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;

public class MainClass {
    //Организуем гонки:
    //Все участники должны стартовать одновременно, несмотря на то, что на подготовку у каждого из них уходит разное время.
    //В туннель не может заехать одновременно больше половины участников (условность).
    //Попробуйте всё это синхронизировать.
    //Только после того как все завершат гонку, нужно выдать объявление об окончании.
    //Можете корректировать классы (в т.ч. конструктор машин) и добавлять объекты классов из пакета util.concurrent.
    //Что примерно должно получиться:
    //
    //ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!
    //Участник #2 готовится
    //Участник #1 готовится
    //Участник #4 готовится
    //Участник #3 готовится
    //Участник #2 готов
    //Участник #4 готов
    //Участник #1 готов
    //Участник #3 готов
    //ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!
    //Участник #2 начал этап: Дорога 60 метров
    //Участник #4 начал этап: Дорога 60 метров
    //Участник #3 начал этап: Дорога 60 метров
    //Участник #1 начал этап: Дорога 60 метров
    //Участник #1 закончил этап: Дорога 60 метров
    //Участник #3 закончил этап: Дорога 60 метров
    //Участник #3 готовится к этапу(ждет): Тоннель 80 метров
    //Участник #1 готовится к этапу(ждет): Тоннель 80 метров
    //Участник #1 начал этап: Тоннель 80 метров
    //Участник #3 начал этап: Тоннель 80 метров
    //Участник #4 закончил этап: Дорога 60 метров
    //Участник #4 готовится к этапу(ждет): Тоннель 80 метров
    //Участник #2 закончил этап: Дорога 60 метров
    //Участник #2 готовится к этапу(ждет): Тоннель 80 метров
    //Участник #3 закончил этап: Тоннель 80 метров
    //Участник #1 закончил этап: Тоннель 80 метров
    //Участник #2 начал этап: Тоннель 80 метров
    //Участник #4 начал этап: Тоннель 80 метров
    //Участник #3 начал этап: Дорога 40 метров
    //Участник #1 начал этап: Дорога 40 метров
    //Участник #3 закончил этап: Дорога 40 метров
    //Участник #3 - WIN
    //Участник #1 закончил этап: Дорога 40 метров
    //Участник #4 закончил этап: Тоннель 80 метров
    //Участник #4 начал этап: Дорога 40 метров
    //Участник #2 закончил этап: Тоннель 80 метров
    //Участник #2 начал этап: Дорога 40 метров
    //Участник #2 закончил этап: Дорога 40 метров
    //Участник #4 закончил этап: Дорога 40 метров
    //ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!
    public static final int CARS_COUNT = 4;
    public static final CyclicBarrier cyclicBarrier = new CyclicBarrier(CARS_COUNT);
    public static final CountDownLatch startLatch = new CountDownLatch(CARS_COUNT);
    public static final CountDownLatch finishLatch = new CountDownLatch(CARS_COUNT);


    public static void main(String[] args) throws InterruptedException {

        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");

        Race race = new Race(new Road(60), new Tunnel(), new Road(40));
        Car[] cars = new Car[CARS_COUNT];

        for (int i = 0; i < cars.length; i++) {
            cars[i] = new Car(race, 20 + (int) (Math.random() * 10));
        }

        // тут же не надо на потоки разбивать?
        for (Car car : cars) {
            new Thread(car).start();
        }
        startLatch.await();
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");
        finishLatch.await();
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");

    }
}
